name: test
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SM_ENVIRONMENT: LOCAL
      SM_DEV_DB_PROJECT: sm_dev
      SM_DEV_DB_HOST: '127.0.0.1'
      SM_DEV_DB_PORT: '3307'
      SM_DEV_DB_USER: root
      SM_DEV_DB_PASSWORD: root
      CONDA: /usr/share/miniconda
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@main

      - name: gcloud setup
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: sample-metadata
          service_account_key: ${{ secrets.GCP_SERVER_DEPLOY_KEY }}
          export_default_credentials: true

      - name: gcloud docker auth
        run: |
          gcloud auth configure-docker australia-southeast1-docker.pkg.dev

      - name: install apt-get packages
        run: |
          sudo apt-get update && sudo apt-get install -y \
          mysql-client python3 python3-pip default-jdk

      - name: start mariadb server
        run: |
          docker stop $NAME
          docker rm $NAME
          docker run -d -p $SM_DEV_DB_PORT:3306 \
          -e MARIADB_ROOT_PASSWORD=$SM_DEV_DB_PASSWORD --name $NAME mariadb
          docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" $NAME
          # Wait until started
          until mysql --host=$SM_DEV_DB_HOST --port=$SM_DEV_DB_PORT \
          -u$SM_DEV_DB_USER -p$SM_DEV_DB_PASSWORD \
          -e 'show databases;'; do sleep 3; done
        env:
          NAME: mariadb-sm

      - name: create a database
        run: |
          mysql --host $SM_DEV_DB_HOST --port $SM_DEV_DB_PORT \
          -u$SM_DEV_DB_USER -p$SM_DEV_DB_PASSWORD \
          -e 'CREATE DATABASE '$SM_DEV_DB_PROJECT';'
          mysql --host $SM_DEV_DB_HOST --port $SM_DEV_DB_PORT \
          -u$SM_DEV_DB_USER -p$SM_DEV_DB_PASSWORD \
          -e 'show databases;'

      - name: run liquibase
        run: |
          pushd db
          if [ ! -e mariadb-java-client-2.7.3.jar ]; then
            gsutil cp gs://cpg-us-sample-metadata-ci/mariadb-java-client-2.7.3.jar .
          fi
          if [ ! -e liquibase.jar ]; then
            gsutil cp gs://cpg-us-sample-metadata-ci/liquibase.jar .
          fi
          java -jar liquibase.jar \
          --url jdbc:mariadb://$SM_DEV_DB_HOST:$SM_DEV_DB_PORT/$SM_DEV_DB_PROJECT \
          --username=$SM_DEV_DB_USER \
          --password=$SM_DEV_DB_PASSWORD \
          --classpath mariadb-java-client-2.7.3.jar \
          --changelogFile=project.xml \
          update
          mysql --host $SM_DEV_DB_HOST --port $SM_DEV_DB_PORT \
          -u$SM_DEV_DB_USER -p$SM_DEV_DB_PASSWORD \
          -e 'use '$SM_DEV_DB_PROJECT'; show tables;'
          popd

      - name: add database projects
        run: |
          mysql --host=$SM_DEV_DB_HOST --port=$SM_DEV_DB_PORT \
          -u$SM_DEV_DB_USER -p$SM_DEV_DB_PASSWORD \
          -e 'use '$SM_DEV_DB_PROJECT'; insert into project \
          (id, name, author, dataset, gcp_id, read_secret_name, write_secret_name) \
          values \
          (1, "'$INPUT_PROJECT'", "'$USER'", "'$INPUT_PROJECT'", "'$GCP_ID'", \
          "'$INPUT_PROJECT'-ci-sample-metadata-main-read-members-cache", \
          "'$INPUT_PROJECT'-ci-sample-metadata-main-write-members-cache"), \
          (2, "'$OUTPUT_PROJECT'", "'$USER'", "'$OUTPUT_PROJECT'", "'$GCP_ID'", \
          "'$OUTPUT_PROJECT'-ci-sample-metadata-main-read-members-cache", \
          "'$OUTPUT_PROJECT'-ci-sample-metadata-main-write-members-cache");'
          mysql --host=$SM_DEV_DB_HOST --port=$SM_DEV_DB_PORT \
          -u $SM_DEV_DB_USER -p$SM_DEV_DB_PASSWORD $SM_DEV_DB_PROJECT  \
          -e 'select * from project;'
        env:
          INPUT_PROJECT: test_input_project
          OUTPUT_PROJECT: test_output_project
          USER: sample-metadata-deploy@sample-metadata.iam.gserviceaccount.com
          GCP_ID: sample-metadata

      - name: install python requirements
        run: pip install -r requirements.txt

      - name: generate python api
        run: python regenerate_api.py

      - name: install python api
        run: sudo pip install -e .

      - name: populate samples
        run: |
          python3 -m api.server &
          sleep 3  # to make sure server finished starting
          python test/test_add_samples_for_joint_calling.py
        env:
          SM_ALLOWALLACCESS: "1"

      - name: run test that simulates joint-calling workflow
        run: |
          python3 -m api.server &
          sleep 3  # to make sure server finished starting
          python test/test_joint_calling_workflow.py
        env:
          SM_ALLOWALLACCESS: "0"
